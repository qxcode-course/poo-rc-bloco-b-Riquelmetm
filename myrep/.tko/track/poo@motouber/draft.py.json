{
    "patches": [
        {
            "label": "2025-10-28_13-40-31",
            "content": "@@ -260,17 +260,17 @@\n self.get\n-D\n+d\n in()%7D%22%0A%0A\n@@ -625,34 +625,32 @@\n  0%0A        self.\n-__\n motorista: Pesso\n@@ -642,31 +642,16 @@\n otorista\n-: Pessoa %7C None\n  = None%0A\n@@ -655,34 +655,32 @@\n ne%0A        self.\n-__\n passageiro: Pess\n@@ -677,23 +677,8 @@\n eiro\n-: Pessoa %7C None\n  = N\n@@ -754,110 +754,13 @@\n r: %7B\n-getmotorista()%7D: Passenger: %7Bgetpassageiro()%7D%22%0A    def subirmoto(self, pessoamoto):%0A        if \n self.\n-__\n moto\n@@ -768,313 +768,28 @@\n ista\n- is not None:%0A            print(%22fail: no driver%22)%0A            return%0A        self.__motorista = pessoamoto%0A%0A    def descermoto(self):%0A        if self.__motorista is None:%0A            print(%22fail: nao tem motorista%22)%0A        self.__motorista = None%0A%0A    def subirpass(self, passageiro):%0A        if \n+%7D: Passenger: %7B\n self.\n-__\n pass\n@@ -798,217 +798,18 @@\n eiro\n- is not None:%0A            print(%22fail: tem passageiro%22)%0A            return%0A        if self.__motorista is None:%0A            print(%22fail: no  driver%22)%0A%0A        self.__passageiro = passageiro%0A        self.custo = 0%0A\n+%7D%22%0A    %0A%0A%0A    \n",
            "lines": "36"
        },
        {
            "label": "2025-10-28_14-11-45",
            "content": "@@ -119,24 +119,27 @@\n      return \n+f%22%7B\n self.__name%0A\n@@ -133,24 +133,26 @@\n %7Bself.__name\n+%7D%22\n %0A    def get\n@@ -177,16 +177,19 @@\n  return \n+f%22%7B\n self.__d\n@@ -190,16 +190,18 @@\n lf.__din\n+%7D%22\n %0A%0A    de\n@@ -406,21 +406,24 @@\n %3C= self.\n-__\n din\n+heiro\n :%0A      \n@@ -433,21 +433,24 @@\n    self.\n-__\n din\n+heiro\n  -= dinh\n@@ -492,21 +492,24 @@\n  = self.\n-__\n din\n+heiro\n %0A       \n@@ -518,21 +518,24 @@\n    self.\n-__\n din\n+heiro\n  = 0%0A   \n@@ -831,18 +831,16 @@\n iro()%7D%22%0A\n-%0A%0A\n     def \n@@ -868,16 +868,112 @@\n amoto):%0A\n+        if self.__motorista is not None:%0A            print(%22fail: no driver%22)%0A            return\n %0A       \n@@ -1112,35 +1112,16 @@\n rista%22)%0A\n-            return%0A\n         \n@@ -1179,24 +1179,16 @@\n ssageiro\n-: Pessoa\n ):%0A     \n@@ -1277,33 +1277,32 @@\n          return%0A\n-%0A\n         if self.\n@@ -1427,779 +1427,4 @@\n = 0%0A\n-%0A%0A%0A    def descerpass(self):%0A        if self.__passageiro is none:%0A            print(%22no passenger to leave%22)%0A            return%0A%0A        pass_obj = self.__passageiro%0A        driver_obj = self.__motorista%0A        custo_total = self.custo%0A%0A        valor_pago = pass_obj.gastar(custo_total)%0A%0A        if valor_pago %3C custo_total:%0A            print(%22fail: Passenger does not have enough money%22)%0A%0A        driver_obj.receber(custo_total)%0A%0A        print(f%22%7Bpass_obj.getName()%7D:%7Bpass_obj.getDin()%7D left%22)%0A%0A        self.__passageiro = None%0A        self.custo = 0%0A    %0A    def andar(self, km:int):%0A        if self.__motorista is None:%0A            print(%22fail: no drive to drive%22)%0A            return%0A        %0A        if self.__passageiro is not None:%0A            self.custo += km%0A    %0A%0A\n",
            "lines": "52"
        },
        {
            "label": "2025-10-28_14-37-59",
            "content": "@@ -2113,693 +2113,5 @@\n    %0A\n-moto = Moto()%0Awhile True:%0A    line = input()%0A    print(%22$%22 + line)%0A    args = line.split()%0A    op = args%5B0%5D%0A    if op == %22end%22:%0A        break%0A    elif op == %22show%22%0A        print(moto)%0A    elif op == %22setDriver%22:%0A        nome = args%5B10%5D%0A        dinheiro = int(args%5B2%5D)%0A        motorista Pessoa(nome, dinheiro)%0A        moto.subirmoto(motorista)%0A    elif op == %22setPass%22:%0A        nome = args%5B1%5D%0A        dinheiro = int(args%5B2%5D)%0A        passageiro = Pessoa(nome, dinheiro)%0A        moto.subirpass(passageiro)%0A%0A    elif op == %22drive%22:%0A        km = int(args%5B1%5D)%0A        moto.andar(km)%0A    %0A    elif op == %22LeavePass%22:%0A        moto.descerpass()%0A    %0A    else: print (f%22fail: error invalid command%22)\n+%0A\n",
            "lines": "87"
        },
        {
            "label": "2025-10-28_14-49-32",
            "content": "@@ -2272,17 +2272,16 @@\n = %22show%22\n-:\n %0A       \n",
            "lines": "115"
        },
        {
            "label": "2025-10-28_14-49-43",
            "content": "@@ -2395,18 +2395,16 @@\n otorista\n- =\n  Pessoa(\n",
            "lines": "115"
        },
        {
            "label": "2025-10-28_14-49-58",
            "content": "@@ -720,158 +720,8 @@\n f):%0A\n-        driver_str = str(self.__motorista) if self.__motorista else %22None%22%0A        pass_str = str(self.__passageiro) if self.__passageiro else %22None%22%0A\n     \n@@ -751,17 +751,17 @@\n f.custo%7D\n-,\n+:\n  Driver:\n@@ -766,20 +766,24 @@\n r: %7B\n-driver_str%7D,\n+getmotorista()%7D:\n  Pas\n@@ -795,20 +795,28 @@\n r: %7B\n+get\n pass\n-_str\n+ageiro()\n %7D%22%0A%0A\n+%0A\n     \n",
            "lines": "115"
        },
        {
            "label": "2025-10-28_14-52-18",
            "content": "@@ -2473,32 +2473,33 @@\n    nome = args%5B1\n+0\n %5D%0A        dinhei\n",
            "lines": "116"
        },
        {
            "label": "2025-10-28_14-52-35",
            "content": "@@ -1,33 +1,4 @@\n-from typing import Optional%0A%0A\n clas\n@@ -7,18 +7,16 @@\n Pessoa:%0A\n-  \n   def __\n@@ -40,20 +40,16 @@\n , din):%0A\n-    \n     self\n@@ -63,20 +63,16 @@\n  = name%0A\n-    \n     self\n@@ -112,51 +112,8 @@\n f):%0A\n-        # CORRE%C3%87%C3%83O: Retorna o valor direto%0A\n     \n@@ -135,21 +135,16 @@\n .__name%0A\n-    %0A\n     def \n@@ -161,51 +161,8 @@\n f):%0A\n-        # CORRE%C3%87%C3%83O: Retorna o n%C3%BAmero (int)%0A\n     \n@@ -310,104 +310,21 @@\n     \n-# CORRE%C3%87%C3%83O: Deve usar o atributo privado '__din'%0A        if dinheiro %3E 0:%0A            self.__din\n+self.dinheiro\n  += \n@@ -349,25 +349,24 @@\n gastar(self,\n- \n dinheiro:int\n@@ -372,65 +372,8 @@\n t):%0A\n-        # CORRE%C3%87%C3%83O: Deve usar o atributo privado '__din'%0A\n     \n@@ -442,104 +442,8 @@\n iro%0A\n-            # CORRE%C3%87%C3%83O: Faltava o return para o pagamento completo%0A            return dinheiro %0A\n     \n@@ -579,66 +579,8 @@\n f):%0A\n-        # CORRE%C3%87%C3%83O: Atributo 'custo' privado, como pedido%0A\n     \n@@ -580,34 +580,32 @@\n ):%0A        self.\n-__\n custo = 0 %0A     \n@@ -597,17 +597,16 @@\n usto = 0\n- \n %0A       \n@@ -624,32 +624,29 @@\n orista: \n-Optional%5BPessoa%5D\n+Pessoa %7C None\n  = None%0A\n@@ -676,36 +676,28 @@\n ro: \n-Optional%5B\n Pessoa\n-%5D =\n+ %7C\n  None\n-%0A    \n+ = None\n %0A   \n@@ -870,64 +870,8 @@\n ne%22%0A\n-        # CORRE%C3%87%C3%83O: Usando o atributo privado '__custo'%0A\n     \n@@ -891,26 +891,24 @@\n Cost: %7Bself.\n-__\n custo%7D, Driv\n@@ -986,16 +986,17 @@\n amoto):%0A\n+%0A\n         \n@@ -1413,220 +1413,48 @@\n er%22)\n- # (Mantendo seu erro de digita%C3%A7%C3%A3o 'no  driver')%0A            # CORRE%C3%87%C3%83O: Faltava o 'return' aqui%0A            return %0A%0A        self.__passageiro = passageiro%0A        # CORRE%C3%87%C3%83O: Usando o atributo privado '__custo'\n+%0A%0A        self.__passageiro = passageiro\n %0A   \n@@ -1455,34 +1455,32 @@\n ro%0A        self.\n-__\n custo = 0%0A%0A%0A    \n@@ -1475,16 +1475,17 @@\n o = 0%0A%0A%0A\n+%0A\n     def \n@@ -1530,25 +1530,25 @@\n ssageiro is \n-N\n+n\n one:%0A       \n@@ -1563,15 +1563,9 @@\n nt(%22\n-fail: N\n+n\n o pa\n@@ -1582,17 +1582,16 @@\n  leave%22)\n- \n %0A       \n@@ -1705,24 +1705,21 @@\n  = self.\n-__\n custo\n- \n %0A%0A      \n@@ -2013,26 +2013,24 @@\n        self.\n-__\n custo = 0%0A  \n@@ -2230,18 +2230,16 @@\n    self.\n-__\n custo +=\n@@ -2318,64 +2318,8 @@\n ne)%0A\n-    %0A    if not line.strip():%0A        continue%0A        %0A\n     \n@@ -2355,21 +2355,16 @@\n args%5B0%5D%0A\n-    %0A\n     if o\n@@ -2847,17 +2847,17 @@\n  op == %22\n-l\n+L\n eavePass\n@@ -2858,17 +2858,16 @@\n vePass%22:\n- \n %0A       \n@@ -2900,30 +2900,22 @@\n   else: \n-%0A        \n print\n+ \n (f%22fail:\n",
            "lines": "116"
        },
        {
            "label": "2025-10-28_14-55-26",
            "content": "@@ -139,32 +139,75 @@\n  getName(self):%0A\n+        # CORRE%C3%87%C3%83O: Retorna o valor direto%0A\n         return s\n@@ -236,32 +236,75 @@\n f getDin(self):%0A\n+        # CORRE%C3%87%C3%83O: Retorna o n%C3%BAmero (int)%0A\n         return s\n@@ -424,24 +424,81 @@\n eiro: int):%0A\n+        # CORRE%C3%87%C3%83O: Deve usar o atributo privado '__din'%0A\n         if d\n@@ -578,24 +578,81 @@\n heiro:int):%0A\n+        # CORRE%C3%87%C3%83O: Deve usar o atributo privado '__din'%0A\n         if d\n@@ -705,24 +705,91 @@\n -= dinheiro%0A\n+            # CORRE%C3%87%C3%83O: Faltava o return para o pagamento completo%0A\n             \n@@ -934,32 +934,90 @@\n __init__(self):%0A\n+        # CORRE%C3%87%C3%83O: Atributo 'custo' privado, como pedido%0A\n         self.__c\n@@ -1297,32 +1297,88 @@\n iro else %22None%22%0A\n+        # CORRE%C3%87%C3%83O: Usando o atributo privado '__custo'%0A\n         return f\n@@ -1906,16 +1906,111 @@\n river%22) \n+# (Mantendo seu erro de digita%C3%A7%C3%A3o 'no  driver')%0A            # CORRE%C3%87%C3%83O: Faltava o 'return' aqui\n %0A       \n@@ -2054,32 +2054,88 @@\n ro = passageiro%0A\n+        # CORRE%C3%87%C3%83O: Usando o atributo privado '__custo'%0A\n         self.__c\n",
            "lines": "136"
        },
        {
            "label": "2025-10-28_14-55-55",
            "content": "from typing import Optional\n\nclass Pessoa:\n    def __init__(self, name, din):\n        self.__name = name\n        self.__din = din\n\n    def getName(self):\n        return self.__name\n    \n    def getDin(self):\n        return self.__din\n\n    def __str__(self):\n        return f\"{self.getName()}:{self.getDin()}\"\n\n    def receber (self, dinheiro: int):\n        if dinheiro > 0:\n            self.__din += dinheiro\n\n    def gastar(self, dinheiro:int):\n        if dinheiro <= self.__din:\n            self.__din -= dinheiro\n            return dinheiro \n        else:\n            pago = self.__din\n            self.__din = 0\n            return pago\n\n    \nclass Moto:\n    def __init__(self):\n        self.__custo = 0 \n        self.__motorista: Optional[Pessoa] = None\n        self.__passageiro: Optional[Pessoa] = None\n    \n    def __str__(self):\n        driver_str = str(self.__motorista) if self.__motorista else \"None\"\n        pass_str = str(self.__passageiro) if self.__passageiro else \"None\"\n        return f\"Cost: {self.__custo}, Driver: {driver_str}, Passenger: {pass_str}\"\n\n    def subirmoto(self, pessoamoto):\n        self.__motorista = pessoamoto\n\n    def descermoto(self):\n        if self.__motorista is None:\n            print(\"fail: nao tem motorista\")\n            return\n        self.__motorista = None\n\n    def subirpass(self, passageiro: Pessoa):\n        if self.__passageiro is not None:\n            print(\"fail: tem passageiro\")\n            return\n\n        if self.__motorista is None:\n            print(\"fail: no  driver\") \n            return \n\n        self.__passageiro = passageiro\n        self.__custo = 0\n\n\n    def descerpass(self):\n        if self.__passageiro is None:\n            print(\"fail: No passenger to leave\") \n            return\n\n        pass_obj = self.__passageiro\n        driver_obj = self.__motorista\n        custo_total = self.__custo \n\n        valor_pago = pass_obj.gastar(custo_total)\n\n        if valor_pago < custo_total:\n            print(\"fail: Passenger does not have enough money\")\n\n        driver_obj.receber(custo_total)\n\n        print(f\"{pass_obj.getName()}:{pass_obj.getDin()} left\")\n\n        self.__passageiro = None\n        self.__custo = 0\n    \n    def andar(self, km:int):\n        if self.__motorista is None:\n            print(\"fail: no drive to drive\")\n            return\n        \n        if self.__passageiro is not None:\n            self.__custo += km\n    \nmoto = Moto()\nwhile True:\n    line = input()\n    print(\"$\" + line)\n    \n    if not line.strip():\n        continue\n        \n    args = line.split()\n    op = args[0]\n    \n    if op == \"end\":\n        break\n    elif op == \"show\":\n        print(moto)\n    elif op == \"setDriver\":\n        nome = args[1]\n        dinheiro = int(args[2])\n        motorista = Pessoa(nome, dinheiro)\n        moto.subirmoto(motorista)\n    elif op == \"setPass\":\n        nome = args[1]\n        dinheiro = int(args[2])\n        passageiro = Pessoa(nome, dinheiro)\n        moto.subirpass(passageiro)\n\n    elif op == \"drive\":\n        km = int(args[1])\n        moto.andar(km)\n    \n    elif op == \"leavePass\": \n        moto.descerpass()\n    \n    else: \n        print(f\"fail: error invalid command\")",
            "lines": "127"
        }
    ]
}