{
    "patches": [
        {
            "label": "2025-10-28_04-30-26",
            "content": "@@ -800,2245 +800,4 @@\n f):%0A\n-        parts = %5Bf%22Notebook: %7B'ligado por ' + str(self.__min_uso) + ' min' if self.__ligado else 'desligado'%7D%22%5D%0A        if self.__carregador:%0A            parts.append(f%22Carregador %7Bself.__carregador.getPotencia()%7DW%22)%0A        if self.__bateria:%0A            parts.append(f%22Bateria %7Bself.__bateria.getCarga()%7D/%7Bself.__bateria.getCapacidade()%7D%22)%0A        print(%22, %22.join(parts))%0A%0A    def turn_on(self):%0A        if self.__carregador or (self.__bateria and self.__bateria.getCarga() %3E 0):%0A            self.__ligado = True%0A            return%0A        print(%22fail: n%C3%A3o foi poss%C3%ADvel ligar%22)%0A%0A    def turn_off(self):%0A        self.__ligado = False%0A%0A    def use(self, tempo: int):%0A        if not self.__ligado:%0A            print(%22fail: desligado%22)%0A            return%0A        for _ in range(tempo):%0A            if self.__carregador and self.__bateria:%0A                self.__bateria.carregar(self.__carregador.getPotencia())%0A            elif self.__bateria:%0A                if self.__bateria.getCarga() %3E 0:%0A                    self.__bateria.descarregar(1)%0A                else:%0A                    print(%22fail: descarregou%22)%0A                    self.__ligado = False%0A                    return%0A            self.__min_uso += 1%0A%0A    def set_battery(self, capacidade: int):%0A        if self.__bateria is not None:%0A            print(%22fail: bateria j%C3%A1 conectada%22)%0A            return%0A        self.__bateria = Bateria(capacidade)%0A%0A    def rm_battery(self):%0A        if self.__bateria is None:%0A            print(%22fail: Sem bateria%22)%0A            return%0A        bat = self.__bateria%0A        print(f%22Removido %7Bbat.getCarga()%7D/%7Bbat.getCapacidade()%7D%22)%0A        self.__bateria = None%0A        if not self.__carregador:%0A            self.__ligado = False%0A        return bat%0A%0A    def set_charger(self, potencia: int):%0A        if self.__carregador:%0A            print(%22fail: carregador j%C3%A1 conectado%22)%0A            return%0A        self.__carregador = Carregador(potencia)%0A%0A    def rm_charger(self):%0A        if self.__carregador is None:%0A            print(%22fail: Sem carregador%22)%0A            return%0A        pot = self.__carregador.getPotencia()%0A        print(f%22Removido %7Bpot%7DW%22)%0A        self.__carregador = None%0A        if self.__bateria is None:%0A            self.__ligado = False%0A\n",
            "lines": "34"
        },
        {
            "label": "2025-10-28_04-30-51",
            "content": "@@ -3041,596 +3041,4 @@\n lse%0A\n-%0A%0Anotebook = Notebook()%0A%0Awhile True:%0A    cmd = input().split()%0A    if cmd%5B0%5D == %22end%22:%0A        break%0A    elif cmd%5B0%5D == %22show%22:%0A        notebook.show()%0A    elif cmd%5B0%5D == %22turnOn%22:%0A        notebook.turn_on()%0A    elif cmd%5B0%5D == %22turnOff%22:%0A        notebook.turn_off()%0A    elif cmd%5B0%5D == %22use%22:%0A        notebook.use(int(cmd%5B1%5D))%0A    elif cmd%5B0%5D == %22setBat%22:%0A        notebook.set_battery(int(cmd%5B1%5D))%0A    elif cmd%5B0%5D == %22rmBat%22:%0A        notebook.rm_battery()%0A    elif cmd%5B0%5D == %22setCharger%22:%0A        notebook.set_charger(int(cmd%5B1%5D))%0A    elif cmd%5B0%5D == %22rmCharger%22:%0A        notebook.rm_charger()%0A\n",
            "lines": "98"
        },
        {
            "label": "2025-10-28_04-33-16",
            "content": "@@ -3079,21 +3079,17 @@\n e:%0A    c\n-omman\n+m\n d = inpu\n@@ -3108,53 +3108,13 @@\n     \n-print(f%22$%7B' '.join(command)%7D%22)%0A%0A    if comman\n+if cm\n d%5B0%5D\n@@ -3140,37 +3140,33 @@\n break%0A    elif c\n-omman\n+m\n d%5B0%5D == %22show%22:%0A\n@@ -3191,37 +3191,33 @@\n how()%0A    elif c\n-omman\n+m\n d%5B0%5D == %22turnOn%22\n@@ -3247,37 +3247,33 @@\n _on()%0A    elif c\n-omman\n+m\n d%5B0%5D == %22turnOff\n@@ -3305,37 +3305,33 @@\n off()%0A    elif c\n-omman\n+m\n d%5B0%5D == %22use%22:%0A \n@@ -3351,29 +3351,25 @@\n ok.use(int(c\n-omman\n+m\n d%5B1%5D))%0A    e\n@@ -3365,37 +3365,33 @@\n %5B1%5D))%0A    elif c\n-omman\n+m\n d%5B0%5D == %22setBat%22\n@@ -3422,29 +3422,25 @@\n attery(int(c\n-omman\n+m\n d%5B1%5D))%0A    e\n@@ -3436,37 +3436,33 @@\n %5B1%5D))%0A    elif c\n-omman\n+m\n d%5B0%5D == %22rmBat%22:\n@@ -3494,37 +3494,33 @@\n ery()%0A    elif c\n-omman\n+m\n d%5B0%5D == %22setChar\n@@ -3559,21 +3559,17 @@\n er(int(c\n-omman\n+m\n d%5B1%5D))%0A \n@@ -3581,13 +3581,9 @@\n if c\n-omman\n+m\n d%5B0%5D\n",
            "lines": "122"
        },
        {
            "label": "2025-10-28_04-37-01",
            "content": "class Bateria:\n    def __init__(self, capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n\n    def getCarga(self):\n        return self.__carga\n\n    def getCapacidade(self):\n        return self.__capacidade\n\n    def descarregar(self, valor):\n        self.__carga = max(0, self.__carga - valor)\n\n    def carregar(self, valor):\n        self.__carga = min(self.__capacidade, self.__carga + valor)\n\n\nclass Carregador:\n    def __init__(self, potencia: int):\n        self.__potencia = potencia\n\n    def getPotencia(self):\n        return self.__potencia\n\n\nclass Notebook:\n    def __init__(self):\n        self.__ligado = False\n        self.__min_uso = 0\n        self.__bateria: Bateria | None = None\n        self.__carregador: Carregador | None = None\n\n    def show(self):\n        parts = [f\"Notebook: {'ligado por ' + str(self.__min_uso) + ' min' if self.__ligado else 'desligado'}\"]\n        if self.__carregador:\n            parts.append(f\"Carregador {self.__carregador.getPotencia()}W\")\n        if self.__bateria:\n            parts.append(f\"Bateria {self.__bateria.getCarga()}/{self.__bateria.getCapacidade()}\")\n        print(\", \".join(parts))\n\n    def turn_on(self):\n        if self.__carregador or (self.__bateria and self.__bateria.getCarga() > 0):\n            self.__ligado = True\n            return\n        print(\"fail: n\u00e3o foi poss\u00edvel ligar\")\n\n    def turn_off(self):\n        self.__ligado = False\n\n    def use(self, tempo: int):\n        if not self.__ligado:\n            print(\"fail: desligado\")\n            return\n        for _ in range(tempo):\n            if self.__carregador and self.__bateria:\n                self.__bateria.carregar(self.__carregador.getPotencia())\n            elif self.__bateria:\n                if self.__bateria.getCarga() > 0:\n                    self.__bateria.descarregar(1)\n                else:\n                    print(\"fail: descarregou\")\n                    self.__ligado = False\n                    return\n            self.__min_uso += 1\n\n    def set_battery(self, capacidade: int):\n        if self.__bateria is not None:\n            print(\"fail: bateria j\u00e1 conectada\")\n            return\n        self.__bateria = Bateria(capacidade)\n\n    def rm_battery(self):\n        if self.__bateria is None:\n            print(\"fail: Sem bateria\")\n            return\n        bat = self.__bateria\n        print(f\"Removido {bat.getCarga()}/{bat.getCapacidade()}\")\n        self.__bateria = None\n        if not self.__carregador:\n            self.__ligado = False\n        return bat\n\n    def set_charger(self, potencia: int):\n        if self.__carregador:\n            print(\"fail: carregador j\u00e1 conectado\")\n            return\n        self.__carregador = Carregador(potencia)\n\n    def rm_charger(self):\n        if self.__carregador is None:\n            print(\"fail: Sem carregador\")\n            return\n        pot = self.__carregador.getPotencia()\n        print(f\"Removido {pot}W\")\n        self.__carregador = None\n        if self.__bateria is None:\n            self.__ligado = False\n\n\nnotebook = Notebook()\n\nwhile True:\n    command = input().split()\n    print(f\"${' '.join(command)}\")\n\n    if command[0] == \"end\":\n        break\n    elif command[0] == \"show\":\n        notebook.show()\n    elif command[0] == \"turnOn\":\n        notebook.turn_on()\n    elif command[0] == \"turnOff\":\n        notebook.turn_off()\n    elif command[0] == \"use\":\n        notebook.use(int(command[1]))\n    elif command[0] == \"setBat\":\n        notebook.set_battery(int(command[1]))\n    elif command[0] == \"rmBat\":\n        notebook.rm_battery()\n    elif command[0] == \"setCharger\":\n        notebook.set_charger(int(command[1]))\n    elif command[0] == \"rmCharger\":\n        notebook.rm_charger()\n",
            "lines": "124"
        }
    ]
}