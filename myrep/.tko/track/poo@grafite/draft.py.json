{
    "patches": [
        {
            "label": "2025-10-28_12-02-26",
            "content": "@@ -3007,14 +3007,46 @@\n alido%22)%0A\n+%0Aif __name__ == %22__main__%22:%0A    \n main()\n",
            "lines": "119"
        },
        {
            "label": "2025-10-28_12-03-13",
            "content": "@@ -489,17 +489,26 @@\n eturn f%22\n-%5B\n+Grossura: \n %7Bself.gr\n@@ -518,38 +518,56 @@\n ura%7D\n-:%7Bself.d\n+, Tamanho: %7Bself.tamanho%7D, D\n ureza\n-%7D\n :\n+ \n %7Bself.\n-tamanho%7D%5D\n+dureza%7D\n %22%0A%0A%0A\n@@ -1276,23 +1276,24 @@\n eturn f%22\n-calibre\n+grossura\n : %7Bself.\n@@ -1303,23 +1303,21 @@\n ssura%7D, \n-grafite\n+ponta\n : %7Bponta\n@@ -2154,25 +2154,17 @@\n mand%5B0%5D%0A\n-        \n %0A\n+\n         \n@@ -2229,17 +2229,20 @@\n  == 'ini\n-t\n+ciar\n ':%0A     \n@@ -2355,17 +2355,20 @@\n d', 'ini\n-t\n+ciar\n '%5D:%0A    \n@@ -2472,17 +2472,18 @@\n = 'inser\n-t\n+ir\n ':%0A     \n@@ -2629,16 +2629,17 @@\n  'remove\n+r\n ':%0A     \n@@ -2690,13 +2690,16 @@\n == '\n-write\n+escrever\n ':%0A \n@@ -3011,40 +3011,8 @@\n o%22)%0A\n-%0Aif __name__ == %22__main__%22:%0A    \n main\n",
            "lines": "117"
        },
        {
            "label": "2025-10-28_12-06-11",
            "content": "@@ -767,9 +767,9 @@\n il: \n-j\n+J\n a ex\n",
            "lines": "119"
        },
        {
            "label": "2025-10-28_12-06-42",
            "content": "@@ -2058,16 +2058,61 @@\n nha%7D%22)%0A%0A\n+        if not command:%0A            continue%0A\n %0A       \n@@ -2979,14 +2979,45 @@\n lido%22)%0A%0A\n+if __name__ == %22__main__%22:%0A    \n main()\n",
            "lines": "119"
        },
        {
            "label": "2025-10-28_12-08-08",
            "content": "class Grafite:\n    def __init__ (self, grossura: float, dureza: str, tamanho: int):\n        self.grossura = grossura\n        self.dureza = dureza\n        self.tamanho = tamanho\n\n    def GastoPorFolha (self):\n        if self.dureza == \"HB\":\n            return 1\n        elif self.dureza == \"2B\":\n            return 2\n        elif self.dureza == \"4B\":\n            return 4\n        elif self.dureza == \"6B\":\n            return 6\n        return 0 \n    \n    def __str__(self) -> str:\n        return f\"[{self.grossura}:{self.dureza}:{self.tamanho}]\"\n\n\nclass Lapiseira:\n    def __init__(self, grossura: float):\n        self.grossura = grossura\n        self.ponta = None\n\n    def inserir(self, grafite_novo: Grafite):\n        if self.ponta is not None:\n            print(\"fail: ja existe grafite\")\n            return\n\n        if self.grossura != grafite_novo.grossura:\n            print(\"fail: calibre incompativel\")\n            return\n        \n        self.ponta = grafite_novo\n\n    def remover(self):\n        if self.ponta is None:\n            print(\"fail: nao existe grafite\")\n            return\n        \n        self.ponta = None\n        \n    def __str__(self) -> str:\n        ponta_str = str(self.ponta) if self.ponta is not None else \"null\"\n        return f\"calibre: {self.grossura}, grafite: {ponta_str}\"\n\n    def escrever(self):\n        if self.ponta is None:\n            print(\"fail: nao existe grafite\")\n            return\n        \n        if self.ponta.tamanho <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n        \n        gasto = self.ponta.GastoPorFolha()\n        \n        if gasto == 0:\n            print(\"fail: dureza invalida, nao gasta\")\n            return\n\n        tamanho_final = self.ponta.tamanho - gasto\n\n        if tamanho_final < 10:\n            self.ponta.tamanho = 10\n            print(\"fail: folha incompleta\")\n        else:\n            self.ponta.tamanho = tamanho_final\n\n\ndef main():\n    lapiseira = None\n\n    while True:\n        linha = input()\n        command = linha.split()\n        \n        print(f\"${linha}\")\n\n\n        op = command[0]\n        \n        if op == 'end':\n            break\n        \n        elif op == 'init':\n            lapiseira = Lapiseira(float(command[1]))\n        \n        elif lapiseira is None and op not in ['end', 'init']:\n            print(\"fail: lapiseira nao foi iniciada\")\n            continue\n        \n        elif op == 'insert':\n            grafite = Grafite(float(command[1]), command[2], int(command[3]))\n            lapiseira.inserir(grafite)\n        \n        elif op == 'remove':\n            lapiseira.remover()\n\n        elif op == 'write':\n            paginas = 1\n            if len(command) > 1:\n                paginas = int(command[1])\n            \n            for _ in range(paginas):\n                lapiseira.escrever()\n\n        elif op == 'show':\n            print(lapiseira)\n        \n        else:\n            print(\"fail: comando invalido\")\n\nmain()",
            "lines": "116"
        }
    ]
}